metadata {
  // Etape 2
  parameter String region {default "REUNION"}			// sous forme de liste deroulante "NORD" "SUD" "EST" OUEST" "REUNION"
  parameter Boolean replaceMeteoFiles {default false}	// nouvelles donnees meteo : OUI ou NON
  //parameter String inputDirNew {default "data/ENTREES"}	// repertoire avec les nouvelles donnees meteo
  parameter String inputDirNew {default "data/ENTREES"}	// repertoire avec les nouvelles donnees meteo
  // Etape 3
  parameter String inputDirWork {default "data/TRAVAIL"}
  // Etape 4
  parameter String date_debut {default "01/01/2014"}
  parameter String date_fin {default "31/12/2016"}
  parameter Boolean outputAllDates {default true}		// sous forme de case a cocher
  parameter Boolean outputLastDate {default true}		// sous forme de case a cocher
  parameter Boolean exportSHP {default true}
  parameter String outputDir {default "output"}
  
  parameter Boolean exportKML {default false}
  
}

scenario DynPopCulicoides {

  println("Model DynPopCulicoides ready to run")

let debutCalcul = new Date
  
//////////// Parametres
  
  fix frequencedisplay = 1 //frequence d'affichage - ici tous les jours
  fix dt = 0.1
  
  let bdateuser = Date|fromString("dd/MM/yyyy",date_debut) // dates souhaitees par l'utilisateur pour les sorties
  let edateuser = Date|fromString("dd/MM/yyyy",date_fin)
  
  //////////// 1) Instanciation des datafacers 
  let shp = new Shp	// le shapefile avec les sites de prelevement
  let nomDeFichier = inputDirWork + "/SHAPEFILE/SITES/Sites_culi.shp"
  shp.setFileName(nomDeFichier)
 
  let shpStation = new ShpStation // le shapefile avec la localisation des stations
  nomDeFichier = inputDirWork + "/SHAPEFILE/STATIONS/31Stations.shp"
  shpStation.setFileName(nomDeFichier)
  
  let csvData = new CsvData // le fichier texte (csv) avec les donnees Meteo
  nomDeFichier = inputDirWork + "/CSVDATA/METEO/97404540.csv"
  csvData.setFileName(nomDeFichier)

  let csvDataNew = new CsvData // le fichier texte (csv) avec les nouvelles donnees Meteo
  nomDeFichier = inputDirNew + "/97404540.csv"
  csvDataNew.setFileName(nomDeFichier)
  
  let csvDataOut = new CsvData // le fichier texte (csv) avec l'ecriture des parametres de la simulation
  nomDeFichier = outputDir + "/historique_simulations.csv"
  csvDataOut.setFileName(nomDeFichier)
  
  let kmlout = new KmlOut	// le fichier KML en sortie
  nomDeFichier = outputDir + "/"+region + "_serietemporelle.kml"
  kmlout.setFileName(nomDeFichier)
  
  let shpout = new ShpOutAllDates	// le fichier ShapeFile en sortie : toutes les dates
  
//////////// 2) Lecture des donnees
 println("Reading data ... ")
 
 // List of sites obtained from the Shapefile datafacer
 //let lsitetot = new List<Site>
 let lsitetot = shp.readAllSite // La liste des polygones 
 println("shp read ...") 	
 
// List of meteorological station obtained from the Shapefile datafacer
  let lstation = shpStation.readAllLocStation()
  //println("found "+lstation.size()+" meteorological stations")
  
// Read temperature and rainfall data
  fix allMeteoData = new KeyMap<Integer,List<DataStation>>
  
  let i = 0
  for (s:lstation) {
  	// Anciennes donnees meteo
  	let nomDeFichierCsv = inputDirWork + "/CSVDATA/METEO/"+s.numero+".csv"
  	csvData.fileName = nomDeFichierCsv
  	
  	// Nouvelles donnees meteo
  	if (replaceMeteoFiles==true) {
  		let nomDeFichierCsvNew = inputDirNew + "/" + s.numero+".csv"
  		//println(nomDeFichierCsv)
  		csvDataNew.fileName = nomDeFichierCsvNew
  		let DataMeteoNew = csvDataNew.readAll()
  		// Ecriture dans le fichier TRAVAIL/csv des nouvelles donnees meteo
  	
  		for (j:DataMeteoNew) {
  			let ligneDeTexte = j.numero.toString
  			ligneDeTexte = ligneDeTexte.concat(";"+j.dateTXT+";"+j.rainMM.toString+";"+j.tempMin.toString+";"+j.tempMax.toString)
  			printToFile(nomDeFichierCsv, ligneDeTexte)
     	}
     }	// fin if
  	
  	let DataMeteo = csvData.readAll()
  	
  	allMeteoData.put(i,DataMeteo)
  	i = i+1
  }
  
  
    
//////////// 3) Initialisation
 //print("Initialization ... ")
 
 // Definition des parametres : date de debut et duree de la simulation
  fix bdate = Date|fromString("yyyy-MM-dd",allMeteoData.get(0).get(0).dateTXT)
  //println("bdate = " + bdate)
  let bdate1 = Date|fromString("yyyy-MM-dd",allMeteoData.get(0).get(0).dateTXT)
  bdate1.addYears(1)
  if (bdateuser.isBefore(bdate1)==true) {bdateuser = bdate1}	// pour garder une annee d'initialisation
  let edate = Date|fromString("yyyy-MM-dd",allMeteoData.get(0).get(0).dateTXT)
  edate.addDays(allMeteoData.get(0).size()-1)
  if(edateuser.isAfter(edate)==true) edateuser = edate
  //println("bdate = " + bdate + " ; bdateuser = " + bdateuser +" ; edateuser = " + edateuser + " ; edate = " + edate )
  
  // Modification des noms de fichiers de sorties
  //nomDeFichier = outputDir + "/"+region + "_serietemporelle.shp"
  let nomDeFichierShpAll = outputDir + "/"+region + "_" + bdateuser.getYear() + format(bdateuser.getMonth(),"00") + format(bdateuser.getDayOfMonth(),"00") + "_" + edateuser.getYear() + format(edateuser.getMonth(),"00") + format(edateuser.getDayOfMonth(),"00") +".shp"
  shpout.setFileName(nomDeFichierShpAll)
  
  if (outputAllDates==true) {
  	shpout.remove() // si le fichier Shape en sortie existe deja, il est supprime
  }
  
 let now = bdate.clone() 
 let test_display =0.0
 let fin = now.clone
 
 for(sit:lsitetot) {
    sit.eggs = 1000.0
  	sit.larvae = 0.0
  	sit.pupae = 0.0
  	sit.adults = 0.0
  	sit.adults_ov = 0.0
//  	sit.rain7 = 0.0
//  	sit.raincumul7 = 0.0
//  	sit.rainday7 = 0
  
  	
  	// Connect sites to the closest meteo station
    sit.dist_station = 1000000.0
    i = 0
    for (s:lstation) {
		let dist = sit.geom.distance(s.geom)
		if (dist<sit.dist_station){
			sit.dist_station=dist
			sit.num_station=s.numero
			sit.id_station=i
			sit.diff_alt=(sit.altitude-s.altitude)
			//sit.nom_station=s.name
		} // fin if
		i=i+1
	} // fin boucle for : station
} // fin boucle for : sites

//////////// 4) Simulation
//println("Simulation start: "+bdate)
  
let day = 0

//for (day : 0..dureesimul-1) {
while (now.isBefore(edateuser.addDays(1))==true) {
	//println(now)
	printOut("date en cours : "+now.toString("dd/MM/yyyy"))
	
	edateuser.addDays(-1)
	
		
	//if (day>=365) {
	if (now.isAfter(bdateuser)==true) {		
		test_display = IEEEremainder(day,frequencedisplay)	// pour l'export des donnees apres la premiere annee
		fin = now.clone
        fin.addDays(frequencedisplay)
	}
	
	let j=0
	
	for (sit:lsitetot) {
	
		
		i = sit.id_station
      	
      	// Read temperature of the day
	  	sit.tmin = allMeteoData.get(i).get(day).tempMin
	  	sit.tmax = allMeteoData.get(i).get(day).tempMax
	  		  	  	  	
  	  	// Read rainfall of the day
	  	//sit.rain = allMeteoData.get(i).get(day).rainMM
      	
      	sit.updateTemp() // Mise a jour de la variable de température
      	sit.gradientAlt(sit.temperature) // Applique un gradient lié au différentie d'altitude sur la température héritée de la station météo
      	sit.lifeCycleFunctions(sit.temperature_grad)	//Mise a jour des fonctions du modele de dynamique de population
      	sit.dynPop(dt)								// Resolution des equations
      	      	
      	if (exportKML==true) {sit.classify()	}							// Classification pour affichage KML
      	
      	// Ecrit le nombre d'adultes présents, dans le KML ou le shapefile - a partir de l'annee 2
      	//if (day>=365) {									
      	if (now.isAfter(bdateuser)==true) {
       		if (test_display ==0) { 
       			if (exportKML==true) { sit.outputKml(day, now, frequencedisplay, kmlout)} // export Kml
      			sit.date_begin = now.toString("yyyy-MM-dd")	//for Shp export and use with time manager plugin	%Y-%m-%d
      			sit.date_end = fin.toString("yyyy-MM-dd")  // in QGIS
     		} 
      	} // fin du if
      	
      	j = j+1
      	
     
     } // fin de la boucle sur les parcelles
    
     // Write A2h values in shapefile - a partir de l'annee 2
     if (now.isAfter(bdateuser)==true) {									
       		if (test_display ==0) {
       			// Creation d'un Shp par date
       			if (outputAllDates==true) shpout.append(lsitetot)
       		}
     }
     
     day = day +1
     now.addDays(1)
} // fin de la boucle sur les jours

//////////// 5) Export

// Saving kml file 
println(".")
println("Saving kml file...")
kmlout.saveAsKml()
//print("Ok.")   

println("Geronimo !") 
}

scenario printOut(String msg) {
  println("-->  "+msg) // affiche le message localement pour vérifier ce qui se passe
  for (sl:simlisteners) sl.consoleEvent(msg+"\n") // Envoie le message (avec ajout d'un passage à la ligne suivante)
}